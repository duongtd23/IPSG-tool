***(
  define some common data structures, functions
)
in ipsg_utils.maude

***(
  a param of input file 
  param = var name + var type
)
fmod PARAM is
  pr(QID) .
  sort Param .

  op param : Qid Qid -> Param [ctor] .
  op pnull : -> Param [ctor] .
  op getParamName : Param -> Qid .
  op getParamType : Param -> Qid .
--- is an existential quantifier variable?
  op isExistential : Param -> Bool .

  vars Q1 Q2 Q3 Q4 : Qid .
  eq getParamName(param(Q1,Q2)) = Q1 .
  eq getParamType(param(Q1,Q2)) = Q2 .
  eq isExistential(param(Q1,Q2)) = 
    (find(string(Q1), "?", 0) == 0) . 
endfm

view Param from TRIV to PARAM is
  sort Elt to Param .
endv

fmod PARAM-LIST is
  protecting LIST{Param} * (sort NeList{Param} to NeParamList, sort List{Param} to ParamList) .
  pr STRING .
  pr CONVERSION .
  
  vars P1 P2 : Param .
  vars PRL1 PRL2 PRL3 : ParamList .
  var PL : ParamList .
  vars S S1 : String .
  vars Q1 Q2 Q3 Q4 : Qid .
  var N : Nat .

  op checkParamNameExist : String ParamList -> Bool .
  eq checkParamNameExist(S, (nil).ParamList) = false .
  eq checkParamNameExist(S, (param(Q1,Q2) PL)) =
    if qid(S) == Q1 then
      true
    else
      checkParamNameExist(S, PL)
    fi .

  op uniqueParamName : String ParamList -> String .
  op doUniqueParamName : String ParamList Nat -> String .
  eq uniqueParamName(S, PL) = 
    if checkParamNameExist(S,PL) then
      doUniqueParamName(S, PL, 1) 
    else 
      S 
    fi .
  ceq doUniqueParamName(S, PL, N) = 
    if checkParamNameExist(S1,PL) then
      doUniqueParamName(S, PL, s(N)) 
    else 
      S1
    fi
  if S1 := S + string(N,10) .

  op remove : ParamList Param -> ParamList .
  op doRemove : ParamList Param ParamList -> ParamList .
  eq remove(PRL1, P1) = doRemove(PRL1, P1, (nil).ParamList) .
  eq doRemove((nil).ParamList, P2, PRL2) = PRL2 .
  eq doRemove(P1 PRL1, P1, PRL2) = PRL2 PRL1 .
  ceq doRemove(P1 PRL1, P2, PRL2) = doRemove(PRL1, P2, PRL2 P1) 
    if P1 =/= P2 .

  op findMatches : Param ParamList -> ParamList .
  op doFindMatches : Param ParamList ParamList -> ParamList .
  eq findMatches(P1, PRL2) = doFindMatches(P1, PRL2, (nil).ParamList) .
  eq doFindMatches(P1, (nil).ParamList, PRL1) = PRL1 .
  eq doFindMatches(P1, P2 PRL2, PRL3) =
    if getParamType(P1) == getParamType(P2) 
    then doFindMatches(P1, PRL2, PRL3 P2)
    else doFindMatches(P1, PRL2, PRL3)
    fi .

--- whether or not there exists an existential quantifier variable in a given term list
  op hasExistVar : ParamList -> Bool .
  eq hasExistVar((nil).ParamList) = false .
  eq hasExistVar(P1 PRL1) = 
    if isExistential(P1)
    then true
    else hasExistVar(PRL1)
    fi .

--- return a list of existential quantifier variables
  op getExistVars : ParamList -> ParamList .
  eq getExistVars((nil).ParamList) = (nil).ParamList .
  eq getExistVars(P1 PRL1) = 
    if isExistential(P1) 
    then (P1 getExistVars(PRL1))
    else getExistVars(PRL1)
    fi .

--- return a list of universal quantifier variables
  op getUnivVars : ParamList -> ParamList .
  eq getUnivVars((nil).ParamList) = (nil).ParamList .
  eq getUnivVars(P1 PRL1) = 
    if isExistential(P1) 
    then getUnivVars(PRL1)
    else (P1 getUnivVars(PRL1))
    fi .
endfm

***(
  represent an invariant input (that can be used as a lemma of other's proof) 
  INPUT-INVARIANT =
  inv name + 
  params + 
)
fmod IPSG-INPUT-INVARIANT is
  pr META-LEVEL .
  pr PARAM-LIST .

  --- represent an invariant
  sort Invariant .
  
  op invariant : Qid ParamList -> Invariant [ctor] .
  op getInvName : Invariant -> Qid .
  op getInvParams : Invariant -> ParamList .
  
  vars INV1 INV2 : Invariant .
  vars PA1 PA2 : Param .
  vars PAL1 PAL2 : ParamList .
  vars QI QI1 QI2 QI3 : Qid .
  
  eq getInvName(invariant(QI, PAL1)) = QI .

  eq getInvParams(invariant(QI, PAL1)) = PAL1 .

--- whether or not there exists an existential quantifier variable in a given term list
  op hasExistVar : Invariant -> Bool .
--- return a list of existential quantifier variables
  op getExistVars : Invariant -> ParamList .
--- return a list of universal quantifier variables
  op getUnivVars : Invariant -> ParamList .
  eq hasExistVar(invariant(QI, PAL1)) = hasExistVar(PAL1) .
  eq getExistVars(invariant(QI, PAL1)) = getExistVars(PAL1) .
  eq getUnivVars(invariant(QI, PAL1)) = getUnivVars(PAL1) .
endfm

***( 
  invariant in which we neeed to generate proof scores
  INPUT-INVARIANT-TARGET =
  inv name + 
  params + 
  param induction on
)
fmod IPSG-INPUT-INVARIANT-TARGET is
  pr IPSG-INPUT-INVARIANT .

--- represent the invariant that will generate its proof scores
  sort InvariantTarget .

--- only generate PrSc for a transition
  sort InvariantTarget2  .

--- generate PrSc but exclude some transitions
  sort InvariantTarget3 .

  subsort InvariantTarget2 InvariantTarget3 < InvariantTarget .
  
  --- op null : -> InvariantTarget [ctor] .
  op invariantTarget : Invariant Param -> InvariantTarget [ctor] .
  
--- only generate PrSc for a transition
  op invariantTarget2 : Invariant Param QidList -> InvariantTarget2 [ctor] .

--- exclude some transitions
  op invariantTarget3 : Invariant Param QidList -> InvariantTarget3 [ctor] .

  op getInvIndVar : InvariantTarget -> Param .
  op getInvName : InvariantTarget -> Qid .
  op getInvParams : InvariantTarget -> ParamList .
  
  vars INV1 INV2 : Invariant .
  vars PA1 PA2 : Param .
  vars PAL1 PAL2 : ParamList .
  vars QI QI1 QI2 QI3 : Qid .
  vars QIL : QidList .
  
  eq getInvIndVar(invariantTarget(INV1, PA1)) = PA1 . 
  eq getInvName(invariantTarget(INV1, PA1)) = getInvName(INV1) .
  eq getInvParams(invariantTarget(INV1, PA1)) = getInvParams(INV1) .

---
  eq getInvIndVar(invariantTarget2(INV1, PA1, QIL)) = PA1 . 
  eq getInvName(invariantTarget2(INV1, PA1, QIL)) = getInvName(INV1) .
  eq getInvParams(invariantTarget2(INV1, PA1, QIL)) = getInvParams(INV1) .
  eq getInvIndVar(invariantTarget3(INV1, PA1, QIL)) = PA1 . 
  eq getInvName(invariantTarget3(INV1, PA1, QIL)) = getInvName(INV1) .
  eq getInvParams(invariantTarget3(INV1, PA1, QIL)) = getInvParams(INV1) .

  op getInvTranGen : InvariantTarget2 -> QidList .
  eq getInvTranGen(invariantTarget2(INV1, PA1, QIL)) = QIL .

  op getInvTranExc : InvariantTarget3 -> QidList .
  eq getInvTranExc(invariantTarget3(INV1, PA1, QIL)) = QIL .
endfm

view Invariant from TRIV to IPSG-INPUT-INVARIANT is
  sort Elt to Invariant .
endv

fmod IPSG-INPUT-INV-LIST is
  protecting LIST{Invariant} * 
  (sort NeList{Invariant} to NeInvList, 
   sort List{Invariant} to InvList) .
  
  op remove : Invariant InvList -> InvList .
  vars INV INV1 : Invariant .
  vars INVL : InvList .
  eq remove(INV, (nil).InvList) = (nil).InvList .
  eq remove(INV, (INV INVL)) = INVL .
  eq remove(INV, (INV1 INVL)) = INVL [owise] .

  op existentialInvs : InvList -> InvList .
  op universalInvs : InvList -> InvList .
  eq existentialInvs((nil).InvList) = (nil).InvList .
  eq existentialInvs(INV INVL) = 
    if hasExistVar(INV)
    then INV existentialInvs(INVL)
    else existentialInvs(INVL)
    fi .
  eq universalInvs((nil).InvList) = (nil).InvList .
  eq universalInvs(INV INVL) = 
    if hasExistVar(INV)
    then universalInvs(INVL)
    else INV universalInvs(INVL)
    fi .
endfm

view InvariantTarget from TRIV to IPSG-INPUT-INVARIANT-TARGET is
  sort Elt to InvariantTarget .
endv

fmod IPSG-INPUT-INV-TARGET-LIST is
  protecting LIST{InvariantTarget} * 
  (sort NeList{InvariantTarget} to NeInvTargetList, 
   sort List{InvariantTarget} to InvTargetList) .
endfm

fmod CONFIG-INPUT is
  pr IPSG-CONFIG .
  sort ConfigInput .
  op configInput : Bool Nat -> ConfigInput [ctor] .
  op defaltConfig : -> ConfigInput .
  eq defaltConfig = configInput(csFirst,maxLogConn) .
endfm

***( INPUT-SPEC =
    module name (inv) +
    invariants list (can be used as lemmas) +
    invariant need to generate proof scores (e.g., only mutex)
 )
fmod IPSG-INPUT-SPEC is
  pr IPSG-INPUT-INV-TARGET-LIST .
  pr IPSG-INPUT-INV-LIST .
  pr CONFIG-INPUT .
  sort IPSGInputSpec .
  
  op null : -> IPSGInputSpec [ctor] .
  op inputSpec : Qid InvList InvTargetList ConfigInput -> IPSGInputSpec [ctor] .
  op getInputSpecMod : IPSGInputSpec -> Qid .
  --- op getInputSpecInvTarget : IPSGInputSpec -> InvariantTarget .
  op getInputSpecInvs : IPSGInputSpec -> InvList .
  op getInputSpecInvsTarget : IPSGInputSpec -> InvTargetList .
  op getInputConfig : IPSGInputSpec -> ConfigInput .
  op isCsFirstEn : IPSGInputSpec -> Bool .
  op getMaxLogConn : IPSGInputSpec -> Nat .

  var Q : Qid .
  vars IL IL2 : InvList .
  var ITL : InvTargetList .
  var CFG : ConfigInput .
  var INV : Invariant .
  var INVS : InvList .

  eq getInputSpecMod(inputSpec(Q, IL, ITL, CFG)) = Q .
  eq getInputSpecInvsTarget(inputSpec(Q, IL, ITL,CFG)) = ITL .
  eq getInputSpecInvs(inputSpec(Q, IL, ITL,CFG)) = IL .

  op addLmsInv : IPSGInputSpec InvList -> IPSGInputSpec .
  op convLms2InvTs : InvList Param -> InvTargetList .

  eq addLmsInv(inputSpec(Q,IL,ITL,CFG), IL2) = inputSpec(Q,IL IL2, ITL,CFG) .
  eq convLms2InvTs((nil).InvList, P:Param) = (nil).InvTargetList .
  eq convLms2InvTs((INV INVS), P:Param) = 
    invariantTarget(INV, P:Param) convLms2InvTs(INVS, P:Param) .
  
  eq isCsFirstEn(
    inputSpec(Q,IL,ITL,configInput(B:Bool,N:Nat))) = B:Bool .
  eq getMaxLogConn(
    inputSpec(Q,IL,ITL,configInput(B:Bool,N:Nat))) = N:Nat .
endfm

fmod MY-TUPLE{C1 :: TRIV, C2 :: TRIV} is
  sort Tuple{C1, C2} .
  op myTuple : C1$Elt C2$Elt -> Tuple{C1, C2} [ctor] . 
  op p1_ : Tuple{C1, C2} -> C1$Elt .
  op p2_ : Tuple{C1, C2} -> C2$Elt .
  var E1 : C1$Elt .
  var E2 : C2$Elt .
  eq p1(myTuple(E1,E2)) = E1 .
  eq p2(myTuple(E1,E2)) = E2 .
endfm

view ViewConst from TRIV to META-TERM is 
  sort Elt to Constant .
endv

view ViewTupleConst from TRIV to MY-TUPLE{ViewConst, ViewConst} is
  sort Elt to Tuple{ViewConst, ViewConst} .
endv

view ViewConst2 from TRIV to QID is
  sort Elt to Qid .
endv

view ViewConst3 from TRIV to MY-TUPLE{ViewConst2, ViewConst2} is
  sort Elt to Tuple{ViewConst2, ViewConst2} .
endv

view ViewVariable from TRIV to META-TERM is 
  sort Elt to Variable .
endv

fmod PARAMS-PERMUTATION is
  pr PARAM-LIST .
  sort ParamsPermutation .
  op {_} : ParamList -> ParamsPermutation [ctor] .
endfm

view ParamsPermutation from TRIV to PARAMS-PERMUTATION is
  sort Elt to ParamsPermutation .
endv

fmod PARAM-PERMUTATION-SET is
  protecting SET{ParamsPermutation} * 
  (sort NeSet{ParamsPermutation} to NeParamPernSet, 
   sort Set{ParamsPermutation} to ParamPernSet) .
endfm

fmod TERMS-PERMUTATION is
  pr META-TERM .
  sort TermsPermutation .
  op {_} : TermList -> TermsPermutation [ctor] .
endfm

view TermsPermutation from TRIV to TERMS-PERMUTATION is
  sort Elt to TermsPermutation .
endv

fmod TERM-PERMUTATION-SET is
  protecting SET{TermsPermutation} * 
  (sort NeSet{TermsPermutation} to NeTermPernSet, 
   sort Set{TermsPermutation} to TermPernSet) .

  op substractSet : TermPernSet TermPernSet -> TermPernSet .
  vars TP TP2 : TermPernSet .
  var TEL : TermList .
  eq substractSet(TP, empty) = TP .
  eq substractSet(empty, TP) = empty .
  eq substractSet(TP, { TEL }) = delete({ TEL }, TP) .
  eq substractSet(TP, ({ TEL } , TP2) ) 
    = substractSet(delete({ TEL }, TP), TP2) .
endfm


***(
  meta represent of reduction command for each proof score
)
fmod IPSG-REDUCTION-TERM-PRSC is
  pr META-LEVEL .
  pr PARAM-LIST .
  pr STRING-UTILS .
  vars QI QI1 QI2 QI3 QI4 QI5 QI6 : Qid . 
  vars QIL QIL1 QIL2 : QidList . 
  vars PRL PRL1 PRL2 : ParamList . 
  vars PR PR1 PR2 : Param . 
  vars MOD1 MOD2 : Module . 
  vars T1 T2 : Term . 

***( 
  module + 
  inv name + 
  transition name + 
  inv params + 
  transition params + 
  param induction on
)
  op genReductionTerm : Module Qid Qid ParamList ParamList Qid -> Term .
  eq genReductionTerm(MOD1, QI1, QI2, PRL1, PRL2, QI3) = 
    '_implies_[
        genLeftSideReductTerm(MOD1, QI1, PRL1),
        genRightSideReductTerm(MOD1, QI1, QI2, PRL1, PRL2, QI3)
      ] 
    .

  op genLeftSideReductTerm : Module Qid ParamList -> Term .
  eq genLeftSideReductTerm(MOD1, QI1, PRL1) = QI1[ genEqParamsTerm(MOD1, PRL1) ] .
  op genEqParamsTerm : Module ParamList -> TermList .
  eq genEqParamsTerm(MOD1, (nil).ParamList) = (empty).TermList .
  eq genEqParamsTerm(MOD1, param(QI1, QI2) PRL1) 
    = getTerm(metaParse(MOD1, QI1, QI2)) , genEqParamsTerm(MOD1, PRL1) .

--- module + inv name + transition name + inv params + transition params + param induction on
  op genRightSideReductTerm : Module Qid Qid ParamList ParamList Qid -> Term .
  eq genRightSideReductTerm(MOD1, QI1, QI2, PRL1, PRL2, QI3)
    = QI1[ genRightEqParamsTerm(MOD1, QI2, PRL1, PRL2, QI3) ] .

--- module + transition name + inv params + transition params + param induction on
  op genRightEqParamsTerm : Module Qid ParamList ParamList Qid -> TermList .
  eq genRightEqParamsTerm(MOD1, QI1, (nil).ParamList, PRL1, QI4)
    = (empty).TermList .
  eq genRightEqParamsTerm(MOD1, QI1, param(QI2, QI3) PRL2, PRL1, QI4) = 
    (if QI2 == QI4 
     then QI1[ genEqParamsTerm(MOD1, PRL1) ]
     else getTerm(metaParse(MOD1, QI2, QI3))
     fi) ,
    genRightEqParamsTerm(MOD1, QI1, PRL2, PRL1, QI4) .

---- mod + inv name + init state name + inv params + init state params + param induction on
  op genReductionTermInit : Module Qid Qid ParamList ParamList Param -> Term .
  eq genReductionTermInit(MOD1, QI1, QI2, PRL1, PRL2, PR1) =
    QI1[ genInitEqParamsTerm(MOD1, QI2, PRL1, PRL2, PR1) ] .

---- module + init state name + inv params + init state params + param induction on
  op genInitEqParamsTerm : Module Qid ParamList ParamList Param -> TermList .
  eq genInitEqParamsTerm(MOD1, QI3, (nil).ParamList, PRL2, param(QI4, QI5)) = 
    (empty).TermList .
  eq genInitEqParamsTerm(MOD1, QI3, param(QI1, QI2) PRL1, PRL2, param(QI4, QI5)) = 
    (if QI1 == QI4 
    then 
      if PRL2 == nil
      then getTerm(metaParse(MOD1, QI3, QI2))
      else QI3[ genEqParamsTerm(MOD1, PRL2) ]
      fi
    else getTerm(metaParse(MOD1, QI1, QI2))
    fi) , 
    genInitEqParamsTerm(MOD1, QI3, PRL1, PRL2, param(QI4, QI5)) .
endfm

***(
  represent the reduction command
)
fmod IPSG-REDUCTION-PRSC is
  pr META-LEVEL .
  pr PARAM-LIST .
  sort IPSGReduction .

***( 
  inv name + 
  transition name + 
  inv params + 
  transition params + 
  param induction on
)
  op reduction : Qid Qid ParamList ParamList Param -> IPSGReduction [ctor] .

  vars QI QI1 QI2 QI3 QI4 : Qid . 
  --- vars QIL QIL1 QIL2 : QidList . 
  vars PRL PRL1 PRL2 : ParamList . 
  vars PR PR1 PR2 : Param . 

  op genReduction : Qid Qid ParamList ParamList Param -> QidList .
  eq genReduction(QI1, QI2, PRL1, PRL2, PR1) = 
    genLeftSideReduct(QI1, PRL1) ' 'implies ' 
    genRightSideReduct(QI1, QI2, PRL1, PRL2, PR1) .
  
  op genLeftSideReduct : Qid ParamList -> QidList .
  eq genLeftSideReduct(QI1, PRL1) = (QI1 '`( genEqParams(PRL1) '`) ) .
  op genEqParams : ParamList -> QidList .
  eq genEqParams((nil).ParamList) = nil .
  eq genEqParams(param(QI1, QI2) (nil).ParamList) = QI1 .
  ceq genEqParams(param(QI1, QI2) PRL1) = 
    (QI1 '`, genEqParams(PRL1)) if PRL1 =/= (nil).ParamList .

  op genRightSideReduct : Qid Qid ParamList ParamList Param -> QidList .
  eq genRightSideReduct(QI1, QI2, PRL1, PRL2, PR1) 
    = QI1 '`( genRightEqParams(QI2, PRL1, PRL2, PR1) '`) .

--- transition name + inv params + transition params + param induction on
  op genRightEqParams : Qid ParamList ParamList Param -> QidList .
  eq genRightEqParams(QI1, param(QI2, QI) (nil).ParamList, PRL1, param(QI3, QI4))
    = if QI2 == QI3 then
        QI1 '`( genEqParams(PRL1) '`)
      else
        QI2
      fi .
  ceq genRightEqParams(QI1, param(QI2, QI) PRL2, PRL1, param(QI3, QI4))
    = (if QI2 == QI3 then
        (QI1 '`( genEqParams(PRL1) '`) '`, 
          genRightEqParams(QI1, PRL2, PRL1, param(QI3, QI4)))
      else
        (QI2 '`, genRightEqParams(QI1, PRL2, PRL1, param(QI3, QI4)))
      fi)
    if PRL2 =/= (nil).ParamList .

  op genReductionInit : Qid Qid ParamList ParamList Param -> QidList .
  eq genReductionInit(QI1, QI2, PRL1, PRL2, PR1) =
    (QI1 '`( genInitEqParams(QI2, PRL1, PRL2, PR1) '`) ) .

  op genInitEqParams : Qid ParamList ParamList Param -> QidList .
  eq genInitEqParams(QI1, (nil).ParamList, PRL2, param(QI3, QI4)) = nil .
  eq genInitEqParams(QI1, param(QI2, QI) (nil).ParamList, PRL2, param(QI3, QI4)) =
    if QI2 == QI3 
    then 
      if PRL2 == nil
      then QI1
      else QI1 '`( genEqParams(PRL2) '`)
      fi
    else QI2
    fi .
  ceq genInitEqParams(QI1, param(QI2, QI) PRL1, PRL2, param(QI3, QI4)) =
      (if QI2 == QI3 
       then 
        if PRL2 == nil
        then QI1
        else QI1 '`( genEqParams(PRL2) '`)
        fi
       else QI2
       fi) '`, 
      genInitEqParams (QI1, PRL1, PRL2, param(QI3, QI4))
    if PRL1 =/= (nil).ParamList .
endfm

***(
  represent module specification, e.g, MCS module
)
fmod IPSG-MODULE-SPEC is
  pr META-LEVEL .
  sort IPSGModuleSpec .
  op null : -> IPSGModuleSpec [ctor] .
  op modSpec : Module -> IPSGModuleSpec .
  op modSpec2 : Module OpDeclSet EquationSet -> IPSGModuleSpec [ctor] .
  op getSpecModule : IPSGModuleSpec -> Module .
  op getSpecModOps : IPSGModuleSpec -> OpDeclSet .
  op getSpecModEqs : IPSGModuleSpec -> EquationSet .

  var M : Module .
  vars EQS EQS1 : EquationSet .
  var EQ : Equation .
  vars OPS OPS1 : OpDeclSet .
  var OP : OpDecl .

  eq modSpec(M) = modSpec2(M,none,none) .
  eq getSpecModule(modSpec2(M,OPS,EQS)) = M .
  eq getSpecModOps(modSpec2(M,OPS,EQS)) = OPS .
  eq getSpecModEqs(modSpec2(M,OPS,EQS)) = EQS .

  op getMSOps : IPSGModuleSpec -> OpDeclSet .
  op getMSEqs : IPSGModuleSpec -> EquationSet .
  eq getMSOps(modSpec2(M,OPS,EQS)) = getOps(M) OPS .
  eq getMSEqs(modSpec2(M,OPS,EQS)) = getEqs(M) EQS .

  op addLMs : IPSGModuleSpec OpDeclSet EquationSet -> IPSGModuleSpec .
  eq addLMs(modSpec2(M,OPS,EQS), OPS1, EQS1) =
    modSpec2(M, OPS OPS1, EQS EQS1) .
endfm


***(
  represent a lemma conjectured
)
fmod IPSG-LEMMA-GENERATED is
  pr META-LEVEL .
  pr IPSG-INPUT-INVARIANT .
  sort LemmaGenerated .

  op lm : OpDecl Equation Nat -> LemmaGenerated [ctor] .
  op getLmOpDecl : LemmaGenerated -> OpDecl .
  op getLmEquation : LemmaGenerated -> Equation .
  op getLmNumber : LemmaGenerated -> Nat .
  op getLmName : LemmaGenerated -> Qid .

  vars OP : OpDecl .
  vars EQ : Equation .
  var N : Nat .
  vars QI QI1 : Qid .
  var TL : TypeList .
  var T : Type .
  vars AS AS1 : AttrSet .
  vars TE TE1 : Term .
  vars TEL TEL1 : TermList .
  vars V : Variable .

  eq getLmOpDecl(lm(OP, EQ, N)) = OP .
  eq getLmEquation(lm(OP, EQ, N)) = EQ .
  eq getLmNumber(lm(OP, EQ, N)) = N .
  eq getLmName(lm(op QI : TL -> T [AS] ., EQ, N)) = QI .

  op lm2InvInput : LemmaGenerated -> Invariant .
  op lm2ParamList : TermList -> ParamList .
  
  eq lm2InvInput(lm(op QI : TL -> T [AS] .,
      eq QI1[TEL] = TE1 [AS1] ., N)) 
    = invariant(QI, lm2ParamList(TEL)) .
  eq lm2ParamList((empty).TermList) = (nil).ParamList .
  eq lm2ParamList((V , TEL)) = 
    param(getName(V), getType(V)) lm2ParamList(TEL) .
endfm

view ViewLemmaGen from TRIV to IPSG-LEMMA-GENERATED is
  sort Elt to LemmaGenerated .
endv

***(
  represent a collection lemma
)
fmod IPSG-LIST-LEMMA-GEN is
  pr IPSG-INPUT-INV-LIST .
  pr LIST{ViewLemmaGen} * 
    (sort List{ViewLemmaGen} to ListLemmas) .
  
  sort IPSGLemmas .

  op ipsglemmas : ListLemmas Nat -> IPSGLemmas [ctor] .
  op getIPSGLms : IPSGLemmas -> ListLemmas .
  op getIPSGLmsNo : IPSGLemmas -> Nat .

  var LMS : ListLemmas .
  var OP : OpDecl .
  var EQ : Equation .
  var N : Nat .
  var LM : LemmaGenerated .
  
  eq getIPSGLms(ipsglemmas(LMS,N)) = LMS .
  eq getIPSGLmsNo(ipsglemmas(LMS,N)) = N .

  op getLmOps : ListLemmas -> OpDeclSet .
  op getLmEqs : ListLemmas -> EquationSet .
  op lms2InvList : ListLemmas -> InvList .

  eq getLmOps((nil).ListLemmas) = none .
  eq getLmOps(lm(OP,EQ,N) LMS) = OP getLmOps(LMS) .
  eq getLmEqs((nil).ListLemmas) = none .
  eq getLmEqs(lm(OP,EQ,N) LMS) = EQ getLmEqs(LMS) .

  eq lms2InvList((nil).ListLemmas) = (nil).InvList .
  eq lms2InvList(LM LMS) = lm2InvInput(LM) lms2InvList(LMS) .

  --- op nullLemmas : -> IPSGLemmas .
  --- eq nullLemmas = ipsglemmas((nil).ListLemmas,0) .

endfm

***( 
  represent a proof score fragment
)
fmod IPSG-PROOF-SCORE is 
  pr IPSG-REDUCTION-PRSC .
  pr IPSG-REDUCTION-TERM-PRSC .
  pr IPSG-MODULE-SPEC .
  pr TO-QID-LIST .
  pr MODULE-UTILS .
  pr NAT-EQUATION-MAP .
  pr IPSG-LIST-LEMMA-GEN .

  sort IPSGProofScore .

***( meta module expression +
    + reduce command in text
    + reduce command in term
    + comment
    + map from index to equation
    + inv name
    + inv params
    + trans name
    + trans params
    )
  op prsc : Module QidList Term QidList MapNatEquation Qid ParamList 
    Qid ParamList IPSGLemmas -> IPSGProofScore [ctor] .

***( meta module expression +
    + inv name
    + transition name
    + inv params
    + transition params
    + induction param
    )
  op prsc1 : Module Qid Qid ParamList ParamList Param IPSGModuleSpec 
    IPSGLemmas -> IPSGProofScore .

  --- op prsc0 : Module QidList Term QidList MapNatEquation Qid ParamList 
  ---   Qid ParamList -> IPSGProofScore .

  op getPrscModule : IPSGProofScore -> Module .
  op getPrscReductionCmd : IPSGProofScore -> QidList .
  op getPrscMetaReduceCmd : IPSGProofScore -> Term .
  op getPrscComment : IPSGProofScore -> QidList .
  op getPrscMapEqs : IPSGProofScore -> MapNatEquation .
  op getInvTagetName : IPSGProofScore -> Qid .
  op getInvTargetParams : IPSGProofScore -> ParamList .
  op getInvTransName : IPSGProofScore -> Qid .
  op getInvTransParams : IPSGProofScore -> ParamList .
  op getPrscInvIndHyp : IPSGProofScore -> Term . --- get induction hypothesis
  op getPrscInvIndConl : IPSGProofScore -> Term . --- get induction conclusion
  op getPrscILemma : IPSGProofScore -> IPSGLemmas . --- get lemmas info
  op isBaseCase? : IPSGProofScore -> Bool .

  vars M1 M2 : Module .
  vars QIL1 QIL2 QIL3 : QidList .
  vars QI1 QI2 : Qid .
  vars PRL1 PRL2 : ParamList .
  vars PR1 PR2 : Param .
  vars T1 T2 : Term .
  var PRSC : IPSGProofScore .
  vars MAP1 MAP2 : MapNatEquation .
  vars EQ1 EQ2 : Equation .
  vars EQS EQS2 : EquationSet .
  vars N1 N2 : Nat .
  --- var INSP : IPSGInputSpec .
  vars PRSC1 PRSC2 : IPSGProofScore .
  vars MS1 MS2 : IPSGModuleSpec .
  vars OP1 OP2 : OpDecl .
  var ATTS1 : AttrSet .
  vars OPS1 OPS2 : OpDeclSet .
  var LMS LMS1 : ListLemmas .
  var ILS ILS1 : IPSGLemmas .

  eq getPrscModule(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = M1 .
  eq getPrscReductionCmd(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = QIL1 .
  eq getPrscMetaReduceCmd(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = T1 .
  eq getPrscComment(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = QIL2 .
  eq getPrscMapEqs(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = MAP1 .
  eq getInvTagetName(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = QI1 .
  eq getInvTargetParams(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = PRL1 .
  eq getInvTransName(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = QI2 .
  eq getInvTransParams(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = PRL2 .
  eq getPrscILemma(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS)) = ILS .
  --- eq getPrscInvIndHyp(PRSC1) = 
  ---   getInvTagetName(PRSC1) [ 
  ---     genEqParamsTerm(getPrscModule(PRSC1), getInvTargetParams(PRSC1)) ] .
  eq getPrscInvIndHyp(PRSC1) = doGetPrscInvIndHyp(getPrscMetaReduceCmd(PRSC1)) .
  op doGetPrscInvIndHyp : Term -> Term .
  eq doGetPrscInvIndHyp('_implies_[T1, T2]) = T1 .
  eq doGetPrscInvIndHyp(T1) = T1 [owise print "671 something wrong"] .

  eq getPrscInvIndConl(PRSC1) = doGetPrscInvIndConl(getPrscMetaReduceCmd(PRSC1)) .
  op doGetPrscInvIndConl : Term -> Term .
  eq doGetPrscInvIndConl('_implies_[T1, T2]) = T2 .
  eq doGetPrscInvIndConl(T1) = T1 [owise print "676 something wrong"] .
  
  ceq isBaseCase?(PRSC1) = false
    if '_implies_[T1, T2] := getPrscMetaReduceCmd(PRSC1) .
  eq isBaseCase?(PRSC1) = true [owise] .

***( meta module expression +
    + inv name
    + init state name
    + inv params
    + init state params
    + induction param
    )
  op prsc-init : Module Qid Qid ParamList ParamList Param IPSGModuleSpec -> IPSGProofScore .
  eq prsc-init(M1, QI1, QI2, PRL1, PRL2, PR1, MS2) =
    prsc(M1,
      genReductionInit(QI1, QI2, PRL1, PRL2, PR1),
      genReductionTermInit(tempMod(M1, MS2), QI1, QI2, PRL1, PRL2, PR1),
      (nil).QidList,
      empty,
      QI1,
      PRL1,
      ',
      (nil).ParamList,
      ipsglemmas((nil).ListLemmas,0)) .

  eq prsc1(M1, QI1, QI2, PRL1, PRL2, PR1, MS2, ILS) = 
    prsc(M1,
      genReduction(QI1, QI2, PRL1, PRL2, PR1),
      genReductionTerm(tempMod(M1, MS2), QI1, QI2, PRL1, PRL2, getParamName(PR1)),
      (nil).QidList,
      empty,
      QI1,
      PRL1,
      QI2,
      PRL2,
      ILS) .
  
  op toQidList : IPSGProofScore Module -> QidList .
  eq toQidList(PRSC, M1) = 
    mod2QidList(getPrscModule(PRSC), M1, getPrscMapEqs(PRSC)) '\n
    qid("***") '`( ' getPrscComment(PRSC) ' '`) '\n
    'red getPrscReductionCmd(PRSC) ' '. .

  op addComment2Prsc : IPSGProofScore QidList -> IPSGProofScore .
  eq addComment2Prsc(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS), QIL3) =
    prsc(M1, QIL1, T1, QIL3, MAP1, QI1, PRL1, QI2, PRL2, ILS) .

--- Equation is new equation to add
--- Nat is the index to append to module name, e.g., 1-1-(2)
  op addEquation2Prsc : IPSGProofScore Equation Nat -> IPSGProofScore .
  eq addEquation2Prsc(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS), EQ1, N1) =
    prsc(
      copyModule&AddEqs2(M1, EQ1, N1),
      QIL1,
      T1,
      QIL2,
      insertAEq(EQ1, MAP1),
      QI1, 
      PRL1,
      QI2,
      PRL2,
      ILS
    ) .

  op toOpenCloseQidList : Qid IPSGProofScore Module -> QidList .
  eq toOpenCloseQidList(QI1, PRSC, M1) = 
    qid("-->") getPrscComment(PRSC) '\n
    mod2OpenCloseQidList(QI1, getPrscModule(PRSC), M1, getPrscMapEqs(PRSC), 
      tabQ 'red getPrscReductionCmd(PRSC) ' '.) .

--- add 1 more equation (case splitting) and update list of lemmas
  op updatePrsc : IPSGProofScore Equation Nat IPSGLemmas -> IPSGProofScore .
  eq updatePrsc(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, ILS), EQ1, N1,ILS1) =
    prsc(
      copyModule&AddEqs2(M1, EQ1, N1),
      QIL1,
      T1,
      QIL2,
      insertAEq(EQ1, MAP1),
      QI1, 
      PRL1,
      QI2,
      PRL2,
      ILS1
    ) .

  op addLemmas2Prsc : IPSGProofScore ListLemmas -> IPSGProofScore .
  eq addLemmas2Prsc(prsc(M1, QIL1, T1, QIL2, MAP1, QI1, PRL1, QI2, PRL2, 
    ipsglemmas(LMS,N1)),LMS1) =
    prsc(
      M1,
      QIL1,
      T1,
      QIL2,
      MAP1,
      QI1, 
      PRL1,
      QI2,
      PRL2,
      ipsglemmas(LMS LMS1, N1 + size(LMS1))
    ) .

--- TODO: handle if duplicated name, e.g, s.Sys already use in MCS
  op tempMod : Module IPSGModuleSpec -> Module .
  eq tempMod(M1, MS1) = (
      fmod getName(M1) is 
        getImports(getSpecModule(MS1))
        sorts getSorts(getSpecModule(MS1)) .
        getSubsorts(getSpecModule(MS1))
        getMSOps(MS1)
        getOps(M1)
        getMbs(getSpecModule(MS1))
        getMbs(M1)
        getMSEqs(MS1)
        getEqs(M1)
      endfm
    ) .

  op tempMod2 : Module IPSGModuleSpec IPSGLemmas -> Module .
  eq tempMod2(M1, MS1, ILS) = (
      fmod getName(M1) is 
        getImports(getSpecModule(MS1))
        sorts getSorts(getSpecModule(MS1)) .
        getSubsorts(getSpecModule(MS1))
        getMSOps(MS1)
        getOps(M1)
        getLmOps(getIPSGLms(ILS))
        getMbs(getSpecModule(MS1))
        getMbs(M1)
        getMSEqs(MS1)
        getEqs(M1)
        getLmEqs(getIPSGLms(ILS))
      endfm
    ) .

***(
  make a temp mod by remove an equation
)
  op tempModRedEq : Module Equation -> Module .
  eq tempModRedEq(M1, EQ1) = (
      fmod getName(M1) is 
        getImports(M1)
        sorts getSorts(M1) .
        getSubsorts(M1)
        getOps(M1)
        getMbs(M1)
        deleteEq(EQ1, getEqs(M1))
      endfm
    ) .
  
  op deleteEq : Equation EquationSet -> EquationSet .
  eq deleteEq(EQ1, (none).EquationSet) = (none).EquationSet .
  eq deleteEq(EQ1, (EQ1 EQS)) = EQS .
  eq deleteEq(EQ1, (EQ2 EQS)) = EQ2 deleteEq(EQ1, EQS) [owise] .

--- generate proof scores without applying induction
***( meta module expression +
    + inv name
    + inv params
)
  op prsc2 : Module Qid ParamList IPSGModuleSpec -> IPSGProofScore .
  eq prsc2(M1, QI1, PRL1, MS2) =
    prsc(M1,
      genLeftSideReduct(QI1, PRL1),
      genLeftSideReductTerm(tempMod(M1, MS2), QI1, PRL1),
      (nil).QidList,
      empty,
      QI1,
      PRL1,
      ',
      (nil).ParamList,
      ipsglemmas((nil).ListLemmas,0)) .

  op getFreshConstList : IPSGProofScore -> TermList .
  eq getFreshConstList(PRSC1) = doGetConstList(getOps(getPrscModule(PRSC1))) .

  op doGetConstList : OpDeclSet -> TermList .
  eq doGetConstList(none) = (empty).TermList .
  eq doGetConstList(op QI1 : nil -> QI2 [ATTS1] . OPS1) 
    = (qid(string(QI1) + "." + string(QI2)) , doGetConstList(OPS1)) .
  eq doGetConstList(OP1 OPS1) = doGetConstList(OPS1) [owise] .

endfm

view IPSGProofScore from TRIV to IPSG-PROOF-SCORE is
  sort Elt to IPSGProofScore .
endv

***(
  list of proof scores
)
fmod IPSG-PROOF-SCORE-LIST is
  sort IPSGProofScores .
  protecting LIST{IPSGProofScore} * 
    (sort NeList{IPSGProofScore} to NePrscList, 
      sort List{IPSGProofScore} to PrscList) .

  var MOD1 : Module .
  vars QI Q1 : Qid .
  vars QL : QidList .
  op toQidList2 : PrscList Module -> QidList .
  eq toQidList2((nil).PrscList, MOD1) = (nil).QidList .
  eq toQidList2(PRSC:IPSGProofScore PRSCL:PrscList, MOD1)
    = toQidList(PRSC:IPSGProofScore, MOD1) '\n '\n
    toQidList2(PRSCL:PrscList, MOD1) .

  op null : -> IPSGProofScores [ctor] .
  op prscs : PrscList -> IPSGProofScores [ctor] .
  op getPrscList : IPSGProofScores -> PrscList .
  eq getPrscList(prscs(PRSCL:PrscList)) = PRSCL:PrscList .

  op toOpenCloseQidList2 : Qid PrscList Module -> QidList .
  eq toOpenCloseQidList2(QI, (nil).PrscList, MOD1) = (nil).QidList .
  eq toOpenCloseQidList2(QI, PRSC:IPSGProofScore PRSCL:PrscList, MOD1)
    = toOpenCloseQidList(QI, PRSC:IPSGProofScore, MOD1) '\n '\n
    toOpenCloseQidList2(QI, PRSCL:PrscList, MOD1) .

  op toOpenCloseStr : Qid PrscList Module -> String .
  eq toOpenCloseStr(QI, (nil).PrscList, MOD1) = "" .
  eq toOpenCloseStr(QI, PRSC:IPSGProofScore PRSCL:PrscList, MOD1)
    = $toOpenCloseStr(QI, PRSC:IPSGProofScore, MOD1) + "\n\n" + 
    toOpenCloseStr(QI, PRSCL:PrscList, MOD1) .

  var PRSC : IPSGProofScore .
  var M1 : Module .
  op $toOpenCloseStr : Qid IPSGProofScore Module -> String .
  eq $toOpenCloseStr(QI, PRSC, M1) = 
    "--> " + qidList2Str(getPrscComment(PRSC)) + "\n" +
    mod2OpenCloseStr(QI, getPrscModule(PRSC), M1, getPrscMapEqs(PRSC), 
      getPrscMetaReduceCmd(PRSC)) .
endfm

***(
  * map from invariant (of input spec) to TermPernSet
  * for each invariant (lemma), we have a set of term permutation
  * that match the params of the lemma
)
view TermPernSet from TRIV to TERM-PERMUTATION-SET is 
  sort Elt to TermPernSet .
endv

fmod INV-TERMPERMUTATIONSET-MAP is
  --- pr META-LEVEL .
  protecting MAP{Invariant, TermPernSet} *
    (sort Map{Invariant, TermPernSet} to MapInvTermPernSet,
      sort Entry{Invariant, TermPernSet} to EntryInvTermPernSet) .
endfm

view TermSet from TRIV to TERM-SET is
  sort Elt to TermSet .
endv

fmod PARAM2TERMSET-MAP is
  pr MAP{Param, TermSet} * 
    (sort Map{Param, TermSet} to MapParamTS, 
      sort Entry{Param, TermSet} to EntryParamTS) .
  op insertEntry : Param TermSet MapParamTS -> MapParamTS .
  op appendM : MapParamTS MapParamTS -> MapParamTS .
  vars P P2 : Param .
  vars TES TES2 : TermSet .
  vars M M2 : MapParamTS .
  eq insertEntry(P, TES, (P |-> TES2 , M)) 
    = (P |-> appendTS(TES2, TES) , M) .
  eq insertEntry(P, TES, M) = insert(P,TES,M) [owise] . 
  eq appendM(empty, M2) = M2 .
  eq appendM((P |-> TES2 , M), M2) 
    = appendM(M, insertEntry(P, TES2, M2)) .
endfm

fmod TUPLE-TERM-PERMUTATION-SET is
  pr TERM-PERMUTATION-SET .
  sort TupleTermPernSet .

--- 1st set: set of termlists, where all terms are fresh constants of sone inv
--- 2nd set: set of termlists, all possible terms (do not overlap with 1st set)
  op |_,_| : TermPernSet TermPernSet -> TupleTermPernSet .
endfm

view TupleTermPernSet from TRIV to TUPLE-TERM-PERMUTATION-SET is 
  sort Elt to TupleTermPernSet .
endv

fmod INV-TUPLETERMPERNSET-MAP is
  protecting MAP{Invariant, TupleTermPernSet} *
    (sort Map{Invariant, TupleTermPernSet} to MapInvTTermPernSet,
      sort Entry{Invariant, TupleTermPernSet} to EntryInvTTermPernSet) .
endfm